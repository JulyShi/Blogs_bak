<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>七姑娘手记</title>
    <description>简单的事情坚持久了，其实卓有成效</description>
    <link>http://localhost:4000/Blogs/</link>
    <atom:link href="http://localhost:4000/Blogs/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 11 Jan 2018 19:17:25 +0800</pubDate>
    <lastBuildDate>Thu, 11 Jan 2018 19:17:25 +0800</lastBuildDate>
    <generator>Jekyll v3.4.3</generator>
    
      <item>
        <title>读《极简主义》</title>
        <description>&lt;p&gt;唉，前段时间七姑娘真是分身乏术啊。一方面承担着QA的工作，探索各种测试框架和工具、学习脚本语言；一方面兼职做新手BA，快速恶补BA领域的专业知识；同时在带新人、讲Session，私下里又跟一群技术狂热者做了一个小小的黑工项目。本以为就像升级打怪一样，待过了这一关便能装备升级、技能满满。没想到做完年终的Self Review之后，待学技能又列了长长一串。&lt;/p&gt;

&lt;p&gt;目标太多、精力分散。正当七姑娘抓耳挠腮、被满满的学习清单压得喘不过气的时候，幸得有书君推荐了一本实用的好书《极简主义：风靡欧美的工作和生活理念》。&lt;/p&gt;

&lt;p&gt;本以为就是一本老生常谈的心灵鸡汤，可当七姑娘翻开书的那一刻，就被作者提出的问题吸引了。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;你的某个员工有体臭，其他员工都在向你抱怨这件事，你应该怎么做？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;你觉得你的公司对客户的服务质量不够好，或者不如你的竞争对手好，你应该怎么做？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;作者提出了简化工作的7个基本原则，有书君将其称为：简化原则、目标原则、因果原则、行动原则、成功原则、应对风险原则、和换位思考原则。
&lt;img src=&quot;/Blogs/img/read-books/image-001.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-简化原则&quot;&gt;1. 简化原则&lt;/h3&gt;

&lt;p&gt;简化原则，事情其实很简单。强调用尽可能简单的方式描述问题、只问简单的问题、把关键信息用简单明了的文字记录下来、寻找最简单的解决办法。&lt;/p&gt;

&lt;p&gt;有很长一段时间，七姑娘鬼使神差地觉得肢体与思维无法同步。与人探讨时思维跟不上听力，讲话时嘴巴又跟不上脑子。于是七姑娘便尝试了简化原则：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在提问时，我尝试聚焦于“是谁”、“什么时候”、“在哪里”、“发生了什么事情”、“为什么会发生”、“是怎样发生的”、“产生了怎样的结果”，这样便快速有效的将问题梳理了出来。&lt;/li&gt;
  &lt;li&gt;这个过程中、我将关键信息用便签记录下来，不再因为思维缓慢造成左耳进右耳出。&lt;/li&gt;
  &lt;li&gt;最后，与人沟通时，我尽可能尝试用25个字把一件事情、一个问题、一个解决方案描述清楚。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;通过刻意练习，七姑娘发现不仅自己的逻辑思维能力在不断提高，沟通方式也变得更加简洁且聚焦重点。&lt;/p&gt;

&lt;h3 id=&quot;2-目标原则&quot;&gt;2. 目标原则&lt;/h3&gt;

&lt;p&gt;目标原则，强调人们在做事情之前，首先要弄明白自己究竟想要做什么。&lt;/p&gt;

&lt;p&gt;书中引用了一句著名的谚语：“如果你不知道自己要驶向哪个港口，那么无论东南西北风，对你来说都是无所谓的。” 这对选择困难症的七姑娘来说，无疑是当头一棒。&lt;/p&gt;

&lt;p&gt;前不久，七姑娘过生日，姐姐要我挑一件礼物，于是我兴致勃勃地去了商场。一进门看到兰蔻专卖店的化妆师在现场教学，七姑娘瞬间就被模特精致的妆容吸引了，于是驻足在柜台前，挑了好多东西。可转念一想自己从不化妆，便放下东西转身走了。后来，我又去了鞋包专区，又被各式各样的包包抅去了魂魄。可冷静下来，又发现作为IT女的自己，似乎每天只能背着电脑包来来回回，于是包包又被放弃了。就这样，七姑娘逛完了整个商场，也没挑到一件称心如意的礼物。&lt;/p&gt;

&lt;p&gt;生活中，很多人正因为不知道自己真正想要什么，想去哪里，所以沿途出现的每个岔路口都看上去具有无比诱惑，花费了很多精力之后，才发现并不是自己想要的。&lt;/p&gt;

&lt;h3 id=&quot;3-因果原则&quot;&gt;3. 因果原则&lt;/h3&gt;

&lt;p&gt;因果原则，强调事物具有连续性。建议一开始就做好计划，尽可能详尽周到、并且懂得运用因果关系，能够根据经验和知识作出假设。&lt;/p&gt;

&lt;p&gt;我相信，大部分人在年初都会设定一个新年目标。可到了年底，绝大多数目标都没能实现。原因很简单，大部分人并没有为实现目标制定具体可行的计划，或者在制定计划时，并没有考虑其中的因果关系。&lt;/p&gt;

&lt;p&gt;七姑娘曾在骑行路上遇到一位名为“海豹骑手”的哥们，刚刚从西藏骑行回来。他说，骑行西藏决不可一蹴而就，自己曾花了将近一年的时间去计划和拉练。刚开始是坚持每天20km快骑、10km长跑，周末就骑到风水岭，接着参加200km不间断挑战赛，然后是400km、600km。这仅仅是体力的训练，他还陆续学会了修车、补胎、做饭、野外扎营、日常医护。此外，要提前规划好了骑行路线，并且不止一种方案。设定计划时一定要尽量分析到途中所有可能遇到情况，比如雨雪天气、路段塌方、受伤生病等。&lt;/p&gt;

&lt;p&gt;任何事情都有连续性，制定计划时要懂得运用因果关系，不断问自己接下来做什么。善于运用知识和假设，设想当遇到某种情况该如何应对，从而将事情串起来。&lt;/p&gt;

&lt;h3 id=&quot;4-行动原则&quot;&gt;4. 行动原则&lt;/h3&gt;

&lt;p&gt;行动原则，如果不去做，永远都做不完。&lt;/p&gt;

&lt;p&gt;假期就要结束了，你的作业还完全没开始，如果还不开始行动，那就永远都做不完。那么，问题来了，有些作业只需要几分钟便能完成、有些却要绞尽脑汁花费好几天。你要如何开始？&lt;/p&gt;

&lt;p&gt;行动原则强调将事情落实到人、使用舞会卡进行时间管理、将目标统一起来、合理安排并使用优先级。&lt;/p&gt;

&lt;h3 id=&quot;5-应对风险原则&quot;&gt;5. 应对风险原则&lt;/h3&gt;

&lt;p&gt;尽管我们已经做了最大的努力，但结果往往充满“惊喜”。&lt;/p&gt;

&lt;p&gt;尽管大楼已经建设的无比坚固了，也尽可能杜绝了一切火源。但仍然需要留有消防通道，并且有频率的进行火灾演习，防患于未然。这边是提前识别风险，备好应急措施、进行风险管理。&lt;/p&gt;

&lt;h3 id=&quot;6-成功原则&quot;&gt;6. 成功原则&lt;/h3&gt;

&lt;p&gt;成功原则是指我们有明确界定事情结果的能力。一件事情，要么成了要么没成，敢于直面事实甚至拎得清事实，这本身就需要极大的智慧。100%才算完成？50%算不算完成？&lt;/p&gt;

&lt;p&gt;要明确界定事情的结果，就需要学会分解问题，并进行进程监控。比如把大象放到冰箱里分为三步：开冰箱门、把大象塞进去、关上冰箱门。倘若只做到第二步，总体来看，只做到了66%，但实际上已经完成了两步。&lt;/p&gt;

&lt;h3 id=&quot;7-换位思考原则&quot;&gt;7. 换位思考原则&lt;/h3&gt;

&lt;p&gt;换位思考原则告诉我们，如果换一种角度看世界，你会发现，事情其实没有那么复杂，解决问题的方法也很简单。跟男朋友吵了架，难道都是对方的责任？换个角度看问题，其实没那么复杂。&lt;/p&gt;

&lt;p&gt;极简主义，道理看似简单，可生活中真正能将这些简单的原则落实到位的小伙伴又有多少。大道至简，越是复杂的事情越要简单化。想要提高做事效率、提升人生幸福感，七姑娘建议，不妨在茶余饭后，翻翻这本《极简主义》。&lt;/p&gt;

</description>
        <pubDate>Sun, 07 Jan 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/Blogs/blog/2018/01/07/Reading-of-Simple-Book/</link>
        <guid isPermaLink="true">http://localhost:4000/Blogs/blog/2018/01/07/Reading-of-Simple-Book/</guid>
        
        <category>读书笔记</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>项目实施DevOps时，我们是如何做测试的</title>
        <description>&lt;h4 id=&quot;本文发表于tw洞见&quot;&gt;&lt;em&gt;本文发表于&lt;a href=&quot;http://insights.thoughtworks.cn/qa-in-devops/&quot;&gt;TW洞见&lt;/a&gt;&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;正如我们所知，DevOps最近几年很风靡，很多企业正在如火如荼的推行它。然而，你可曾想过，从传统到敏捷、再到DevOps，开发模式的不断革新对测试提出了怎样的挑战？&lt;/p&gt;

&lt;p&gt;最近我们项目在实施DevOps，因此想趁热打铁，就DevOps模式下如何做测试，谈一谈自己的认知。&lt;/p&gt;

&lt;h2 id=&quot;devops有什么特征&quot;&gt;DevOps有什么特征&lt;/h2&gt;
&lt;p&gt;DevOps是一系列软件开发实践，强调开发人员（Dev）和运维人员（Ops）之间的沟通合作，通过自动化流程，使得软件构建、测试、发布更加快捷、频繁和可靠&lt;/p&gt;

&lt;h4 id=&quot;1-devops强调一种文化&quot;&gt;1. DevOps强调一种文化&lt;/h4&gt;
&lt;p&gt;在很多企业中，开发和运维人员通常隶属于不同部门，有着不同的工作环境，采用不同的沟通方式，使用不同的开发或运维工具，并且有着不同的业务目标，这使得他们之间形成一道参不透的墙。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/Blogs/img/testing-on-devops/image-001.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;DevOps实际是一种文化上的变迁，强调开发、运维、测试等环节之间的沟通合作。意在帮助这些人向着一个共同的目标努力：尽可能为公司提供更多价值。为了支持这种合作的发生，需要在团队内部文化和企业组织文化两个层面做出努力。
&lt;img src=&quot;/Blogs/img/testing-on-devops/image-002.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-devops是一种实践&quot;&gt;2. DevOps是一种实践&lt;/h4&gt;
&lt;p&gt;所谓DevOps，就是将敏捷方法延伸到Production!&lt;/p&gt;

&lt;p&gt;DevOps主要是为了将敏捷开发实践扩展到运维阶段，进一步完善软件构建、验证、部署、交付等流程，使得跨职能团队能够完成从设计到生产支持等各环节的工作。
&lt;img src=&quot;/Blogs/img/testing-on-devops/image-003.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;3-devops包含一系列工具链&quot;&gt;3. DevOps包含一系列工具链&lt;/h4&gt;
&lt;p&gt;DevOps是一种融合了一系列基本原则和实践的方法论，并从这些实践中派生出了各种&lt;strong&gt;工具&lt;/strong&gt;。这些工具体现在软件开发和交付过程的不同阶段：
&lt;strong&gt;编码&lt;/strong&gt;：代码开发和审阅，版本控制工具、代码合并工具
&lt;strong&gt;构建&lt;/strong&gt;：持续集成工具、构建状态统计工具
&lt;strong&gt;测试&lt;/strong&gt;：通过测试和结果确定绩效的工具
&lt;strong&gt;打包&lt;/strong&gt;：成品仓库、应用程序部署前暂存
&lt;strong&gt;发布&lt;/strong&gt;：变更管理、发布审批、发布自动化
&lt;strong&gt;配置&lt;/strong&gt;：基础架构配置和部署，基础架构即代码工具
&lt;strong&gt;监视&lt;/strong&gt;：应用程序性能监视、最终用户体验&lt;/p&gt;

&lt;h2 id=&quot;devops对测试提出了哪些挑战&quot;&gt;DevOps对测试提出了哪些挑战&lt;/h2&gt;

&lt;p&gt;刚参加工作时，我参与了某Audi系汽车电子的软件研发，采用的是传统瀑布开发模式。在整个项目生命周期中，前半部分设计和编码，后半部分用来测试。然而我在东家工作了两年，也没能等到产品交付到用户手上。直到去年，我们的软件才得以量产并投入市场。在这4年中，产品从未交到用户手上，因此无法验证它所带来的价值，也没有任何机会得到用户反馈从而适应变化。&lt;/p&gt;

&lt;p&gt;后来，我又参与一个银行项目，我们采用敏捷的开发模式，全功能团队，开发测试并行，每2-3周就交付一个版本。但因为没有真正发布到生产环境，我们仍然无法及时得到有效的用户反馈。&lt;/p&gt;

&lt;p&gt;现在，我们采用DevOps的优秀实践，开发和运维协同工作。每个迭代完成，或者每修复一个线上缺陷就立即部署到生产环境。这样，我们就能够迅速从用户处获得反馈并且快速做出响应。&lt;/p&gt;

&lt;p&gt;通过参与传统、敏捷和DevOps的项目，我深深地感受到流程的改进对团队以及项目的产出和质量所带来的改变。
&lt;img src=&quot;/Blogs/img/testing-on-devops/image-004.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;那么，这些改变究竟是对测试提出了什么样的挑战? 我认为有以下几点:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. 频繁部署&lt;/strong&gt;
在采用DevOps之后，我们能够根据项目具体情况做到每天甚至一天多次部署。在生产环境频繁部署软件，最大的挑战就是测试。以前，测试基本上都在开发阶段之后和产品上线之前完成。但现在，不再有充足的时间留给QA团队去发现问题再抛给开发团队来修复。那么，速度成了测试面临的一大挑战。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. 自动化&lt;/strong&gt;
DevOps强调将流程自动化，测试作为其中一个重要环节，势必要大规模实现自动化。因此测试人员的自动化编码能力正在面临极大的挑战。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. 实践和反馈&lt;/strong&gt;
敏捷提倡我们要拥抱变化，更多的是要适应需求的不断变化。虽然一部分功能性需求是明确又具体的，我们清楚的知道用户想要什么，也因此易于测试。然而，也有一些非功能性需求的验收标准没那么明确，比如：提高应用性能达到良好的用户体验。我们如何才能验证用户体验是否真的良好呢？仅仅通过性能指标吗？当然不是，满足指标只能说明一部分问题，唯有真实的用户数据和反馈才是可最靠的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. 协作&lt;/strong&gt;
敏捷强调全功能开发团队的共同协作，但这仅仅止于开发阶段。而DevOps注重Dev、Ops和QA三个群体之间的密切协作。因此，良好的角色定位能够帮助测试人员将价值最大化。&lt;/p&gt;

&lt;h2 id=&quot;我们是如何做测试的&quot;&gt;我们是如何做测试的&lt;/h2&gt;

&lt;p&gt;Laurent曾经在Hiptest上发表了博客&lt;a href=&quot;https://blog.hiptest.net/2015/06/26/shift-left-and-shift-right-the-testing-swing/&quot;&gt;《Shift left and shift right: the testing Swing》&lt;/a&gt;，提出了一个有意思的测试矩阵，从四个维度进行分析，描述了当软件开发模式从瀑布到敏捷、再到DevOps转型时，测试该如何响应变化。
&lt;img src=&quot;/Blogs/img/testing-on-devops/image-005.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Laurent提出一个测试左移和右移的概念:
所谓&lt;strong&gt;测试向移&lt;/strong&gt;，就是指在&lt;strong&gt;开发阶段之前定义测试&lt;/strong&gt;。
所谓&lt;strong&gt;测试右移&lt;/strong&gt;：就是&lt;strong&gt;直接在生产环境中监控&lt;/strong&gt;，并且&lt;strong&gt;实时获取用户反馈&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;在敏捷开发的生命周期中，我们通过每一次迭代来丰富和更新产品，以使其最大限度地符合客户对系统的需求。当时测试的关注点基本停留在开发阶段，以保证产品达到上线标准。引入DevOps之后，我们不仅要关注产品的质量是否达标，还需要使价值假设得到及时的验证。因此，我们不仅要将测试左移，在开发环境验证功能的可用性，还要进行测试右移，通过监控产品在生产环境的运作情况，来验证其价值并获得反馈，从而持续改进。基于这些理解，我在项目上做了初步的尝试并取得良好的效果。我将这些尝试和实践总结为以下几点：&lt;/p&gt;

&lt;h4 id=&quot;1-如何保证新功能得以实现&quot;&gt;(1). 如何保证新功能得以实现？&lt;/h4&gt;
&lt;p&gt;在开发环境，我们开发新功能，并且通过测试保证其达到产品验收标准。&lt;/p&gt;

&lt;p&gt;在开发环境，我们开发新功能，并且通过测试保证其达到产品验收标准。&lt;/p&gt;

&lt;p&gt;首先，使用&lt;strong&gt;BDD&lt;/strong&gt;（Behavior Driven Development，BDD）的方式定义用户需求，这样用特定的语言来描述用户行为，能够使各个角色（测试、开发、产品负责人、市场等）对业务价值达成一致的理解，从而使其从需求到最后的测试验证，进行高度的协作和沟通，最后交付最有价值的功能。同时，QA能够提前Review故事卡，补充验收标准。除此之外，BDD方式的用户需求可以直接指导测试，后续我会写到。&lt;/p&gt;

&lt;p&gt;其次，采用单元测试来验证最基本的代码逻辑。在编写单元测试时，建议Dev和QA Pair工作。单元测试可以认为是编码的一部分，要对系统的代码逻辑有深入的了解，因此，Dev是最合适的人选，而QA可以帮助测试覆盖的更全面。&lt;/p&gt;

&lt;p&gt;最后，每一个功能都要严格按照故事卡的AC（Acceptance Criteria）进行验收，并采用探索性测试方法来对新功能进行无死角测试。&lt;/p&gt;

&lt;h4 id=&quot;2-怎样验证新功能的价值&quot;&gt;(2). 怎样验证新功能的价值？&lt;/h4&gt;
&lt;p&gt;我们将新功能部署到生产环境以后，接下来就应该衡量业务价值是否达到预期。&lt;/p&gt;

&lt;p&gt;验证预期的一个好方法是衡量用户的行为变化。比如：在上传图片的功能后面添加了一个预览按钮，但用户却极少用它，很可能是因为用户根本不需要这个按钮，或者按钮放在了不恰当的位置导致用户不方便使用，亦或是按钮样式不够友好，导致用户没有欲望使用它。这时候，该按钮的业务价值就没有真正达到，是时候调整一下了。&lt;/p&gt;

&lt;h4 id=&quot;3-如何确保已有功能不被破坏&quot;&gt;(3). 如何确保已有功能不被破坏？&lt;/h4&gt;
&lt;p&gt;在软件开发中，任何代码都不可能完全独立存在，一行代码的变更也有可能导致系统的全面崩溃。那么，如何保证在开发新功能的同时，已有功能不被破坏？换句话说，如何做到全面的回归测试？人力是最高成本，也有现实的局限性，比如，人手不够，重复做同样的事情人会变得烦躁，手不够快导致效率低下等。因此，自动化测试才是不二选择。&lt;/p&gt;

&lt;p&gt;将&lt;strong&gt;BDD需求直接转化为自动化测试用例&lt;/strong&gt;。每个测试用例都应该讲一个关于应用程序的故事。当一个测试用例使用一致的业务术语定义时，它的可读性会比较高，且容易自动化。与此同时，上一个迭代的用例在下一个迭代就可以迅速转化为回归测试的基线。&lt;/p&gt;

&lt;p&gt;支持BDD的工具有很多，比如：Cucumber。简单举个例子，如图：
&lt;img src=&quot;/Blogs/img/testing-on-devops/image-006.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;BA用BDD方式定义用户需求，QA Review并补充AC，然后将其编写为自动化测试脚本。如果QA的编码能力较弱，可以让Dev协助完成代码实现的部分。这也充分说明了协作的意义。&lt;/p&gt;

&lt;p&gt;最后，也是更重要的部分，测试应该集成在CI中。每一次Build或者每天都要去执行测试，验证已有功能是否完好。这样才会对没有预期到的变化产生的问题给出快速反馈。&lt;/p&gt;

&lt;p&gt;另外，做一些性能测试、兼容性测试、和安全性测试等等。&lt;/p&gt;

&lt;h4 id=&quot;4-怎样验证产品的可靠性&quot;&gt;(4). 怎样验证产品的可靠性？&lt;/h4&gt;

&lt;p&gt;有时候，某些缺陷并不是源于代码的错误，而是一个不好的用户体验，或者只有当数据达到一定量时才会出现，测试人员是无法模拟这种类型的测试的，因此直接在生产环境监控变得高效又可靠。通常我们需要监控两种特性：性能和可用性。&lt;/p&gt;

&lt;p&gt;使用工具持续获取用户数据，或者使用log持续获取性能信息。这有助于监控产品部署到生产环境后是如何正确运作的。快速启用一个功能，在生产环境实时监控验证其业务价值，获取到有效且快速的用户反馈，加之拥有持续部署的能力，我们能够在出现问题的时候快速做出反应，从而使得我们的产品更加可靠。&lt;/p&gt;

&lt;p&gt;这里实际上融入了《QA in Production》的理念。现如今，已经有很多工具和方法支持在生产环境做测试了。篇幅太长，这里就不做详细阐述了，请参考&lt;a href=&quot;https://martinfowler.com/articles/qa-in-production.html&quot;&gt;原文&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;到这里，再来回顾一下，我们的实践是否真的卓有成效。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;用BDD的方式定义用户需求、编写测试，有益于不同角色之间的一致理解和共同协作。&lt;/li&gt;
  &lt;li&gt;自动化测试解决了频繁部署所带来的挑战，同时保证产品的整体功能持续得到回归和验证。&lt;/li&gt;
  &lt;li&gt;在线监控能有效地验证不确定需求，通过生产数据分析和预警问题的发生，并且快速获取用户反馈从而及时调整。除此之外，这一点也充分体现了Dev、QA和Ops的协作，像监控等原本只能Ops做的事，现在Dev或QA一样可以做。&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;写在最后&quot;&gt;写在最后&lt;/h4&gt;
&lt;p&gt;测试是一种活动，曾经我们通过它来验证产品是否达到上线标准。现在DevOps模式下，我们需要在各个阶段不断地执行测试活动，以达到产品质量的持续改进。&lt;/p&gt;

&lt;p&gt;而QA（Tester）仅仅是一种较多进行测试活动的角色。敏捷一直强调“团队为质量负责”，测试不再是QA（Tester）的专属。DevOps模式更是对测试、尤其是自动化测试提出了更高的要求，也对QA的编码能力提出了极大的挑战。作为团队成员，每个人都有责任了解开发流程、提高测试技能，把好测试这一关。但是，测试活动作为QA（Tester）的主要职责之一，提高自动化测试技能，就是当下每个QA（Tester）最为紧急且重要的事情了。&lt;/p&gt;

</description>
        <pubDate>Sun, 05 Nov 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/Blogs/blog/2017/11/05/how-to-test-under-Devops/</link>
        <guid isPermaLink="true">http://localhost:4000/Blogs/blog/2017/11/05/how-to-test-under-Devops/</guid>
        
        <category>Devops</category>
        
        <category>测试</category>
        
        
        <category>blog</category>
        
      </item>
    
  </channel>
</rss>
